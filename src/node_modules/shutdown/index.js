var gracefulShutDown = false;
var forceShutdownDelay = 1 * 1000;
var server;

var shutdown = exports = module.exports = {};

/**
 * Defines shutdown's middleware
 *
 * @api public
 */
shutdown.handle = function(req, res, next) {
    if( gracefulShutDown ){
        res.setHeader("Connection", "Close");
        res.statusCode = 502;
        res.end();
    } else {
      next();
    }
};

/**
 * Used to set the function that shutdown will call 
 * on server for shutdown
 *
 * @param {String|Server} app
 * @param {Function} fn
 * @return {app} for chaining
 * @api public
 */
shutdown.set = function(app, fn) {
    if( 'string' === typeof app && 'function' !== typeof fn) {
        switch (app) {
            case "forceShutdown":
                forceShutdownDelay = fn;
                return;
        }
    }
    
    if(app) {
        server = app;
        onShutdown = fn;
    }

    return app;
}


process.on('SIGTERM', function (){
   gracefulShutDown = true;
   if(server) {
     server.close(onShutdown());
     setTimeout(onShutdown, forceShutdownDelay);
   }
});