var Log = require('log').Log;
function ReportObject()
{
	this.FileCount = 0
}


ReportObject.prototype.ExecuteIfComplete = function ()
{
	console.log('complete');
}
function Fold(){}



var SFOLD_CALL_NO_CONSTRAINT = "sfold -o %OUTDIR% %SEQUENCEFILE%";
var SFOLD_CALL = "sfold -f %CONSTRAINT% -o %OUTDIR% %SEQUENCEFILE%";

/*Takes in file containing multiple sequences separated by an endline*/
Fold.SFold = function( sequenceFile, targetFolder , reportObj ,constraintFile )
{
	Log('Started folding ' + sequenceFile, 'Fold.SFold', 7);
	var sys = require('sys')
	var exec = require('child_process').exec;
	var command = '';
	if(constraintFile ==undefined)
	{
		command = SFOLD_CALL_NO_CONSTRAINT
		.replace('%OUTDIR%',targetFolder)
		.replace('%SEQUENCEFILE%',sequenceFile);
	}
	else
	{
		command = SFOLD_CALL_NO_CONSTRAINT
		.replace('%OUTDIR%',targetFolder)
		.replace('%SEQUENCEFILE%',sequenceFile)
		.replace('%CONSTRAINT%',constraintFile);
	}
	exec(command, 
		function/* CommandExecuteCallback*/( error, stdout, stderr )
		{
			if(error !== null)
			{
				Log("Could not call sfold with " + sequenceFile + "," + targetFolder + "constraintFile", "Fold.SFold" , 0); 
			}
			
			Log("stdout sfold " + command + ": " + stdout , "SFold", 3);
			Log("stderr sfold " + command + ": " + stderr, "SFold", 0 );

			reportObj.FileCount =  reportObj.FileCount - 1;
			reportObj.ExecuteIfComplete();
		}
	);
	Log('Completed folding ' + sequenceFile, 'Fold.SFold', 7);
}



Fold.UnaFold = function ( file, options)
{

}



//Candidate
//	ID
//	cutsiteID
//	requestID
//	sequence
//	
//
Fold.ExecuteFolding = function(candidate, constraints, reportObj )
{
	Log('Executing fold of candidate ' + candidate.ID, 'Fold.ExecuteFolding',6);
	var fs = require('fs');
	var seqFile = candidate.requestID+'/'+candidate.cutsiteID + '/'+ candidate.ID +'.seq';
	fs.writeFileSync(seqFile,'> File for  ' + candidate.ID +'\n' +candidate.sequence );
	var newDir = candidate.requestID+'/'+candidate.cutsiteID + '/'+ candidate.ID + '/'
	fs.mkdirSync(newDir)
	reportObj.FileCount += 1;
	Fold.SFold( seqFile , newDir, reportObj );
	Log('Completed executing fold of candidate ' + candidate.ID, 'Fold.ExecuteFolding',6);
}



//	CutSite
//		ID
//		requestID

Fold.FoldCandidates = function ( cutSite , seqArray, reportObj)
{
	Log('Folding candidates for cutSite ' + cutSite.ID, 'Fold.FoldCandidates',5);
//TEMP
//UPPER LEVEL SHOULD HANDLE THIS
	var fs = require('fs');
	fs.mkdirSync(cutSite.requestID)
//ENDTEMP
	var newDir = cutSite.requestID+'/'+cutSite.ID ;
	fs.mkdirSync(newDir)
	for(var ii = 0; ii < seqArray.length ; ++ii )
	{
		Fold.ExecuteFolding({'ID' :'cand' + ii, 'cutsiteID': cutSite.ID, 'requestID': cutSite.requestID, 'sequence':'UUA CUG GAA CUG AUG AGU CCG UGA GGA CGA A AC AUC UGG AGA' },
					'',
					new ReportObject()
					);
	}
	Log('Finished Folding candidates for cutSite ' + cutSite.ID, 'Fold.FoldCandidates',5);
}



Fold.FoldCandidates ( {'ID' : 'cutSite'+0, 'requestID':'test'}, ['UUA CUG GAA CUG AUG AGU CCG UGA GGA CGA A AC AUC UGG AGA'], new ReportObject()  ); 



console.log('ex');
exports.Fold = Fold;
exports.ReportObject = ReportObject;
