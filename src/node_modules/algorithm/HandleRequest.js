var CandidateGenerationModule =  require( './candidateGenerationModule/');
var Folding = require ('./sfoldModule/');
var FoldCandidates = Folding.FoldCandidates;
var Model = require('./model/');
var Candidate = Model.DomainObjects.Candidate;


function AddCore(sequence, location,CoreStructure)
{

}

//Request
// {
//	prefs
//	{
//		tempEnv,
//		naEnv,
//		mgEnv,
//		oligoEnv,
//		cutsites 
//	}
//	
//
//
function HandleRequest(Request)
{
	var possibleCutsitesTypes = request.prefs.cutsites;
	var candidates = new Array();
	for(var ii = 0 ; ii < possibleCutsites.length ; ++ii)
	{
	
		var rawCandidatesPerCusite = CandidateGenerationModule.GenerateCandidates 
			(
				request.sequence,
				possibleCutsitesTypes[ii], 
				{
					'left_arm_min' : request.prefs.left_arm_min ,
					'right_arm_min' : request.prefs.right_arm_min,
					'left_arm_max' : request.prefs.left_arm_max,
					'right_arm_max' : request.prefs.right_arm_max,
					'promoter' : request.prefs.promoter
				}
			);
		
		for(var jj = 0; jj < rawCandidatesPerCusite.length; ++jj)
		{
			var rawCandidate = rawCandidatesPerCusite[ii][jj];
			var seqWithCore = AddCore(rawCandidate.seq, rawCandidate.cut ,Model.DomainObjects.CATALITIC_CORES[coreTypeId]);
			var newCandidate  = new Candidate( rawCandidate.seq , rawCandidate.cut, Id, request.coreTypeId, request.ID ,/*Create cutsite ID*/possibleCutsitesTypes[ii] + jj.toString(),rawCandidate.targetLocation );
			
		}
	}
	
	Fold.FoldCandidates ( {'ID' : 'cutSite'+0, 'requestID':'test'}, ['UUA CUG GAA CUG AUG AGU CCG UGA GGA CGA A AC AUC UGG AGA'], new ReportObject()  ); 
}



exports.HandleRequest = HandleRequest;