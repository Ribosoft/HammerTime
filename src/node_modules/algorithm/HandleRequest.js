var CandidateGenerationModule =  require( './candidateGenerationModule/');
var FoldModule = require ('./sfoldModule/');
var FoldCandidates = FoldModule.Folding.Fold.FoldCandidates;
var ParseUtilities = FoldModule.Parsing.ParseUtilities;
var Model = require('./model/');
var Candidate = Model.DomainObjects.Candidate;
var Log = require('log').Log
//var ReportObject = Model.DomainObjects.ReportObject;



function ReportObject(request)
{
    this.Request = request;
	this.FileCount = 0;
}


ReportObject.prototype.ExecuteIfComplete = function (part)
{
    Log("Current file count " + this.FileCount, "ReportObject.ExecuteIfComplete", 6); 
    if(this.FileCount == 0)
    {
        switch (part)
        {
            case 1:
                Log('Compleated folding of sequences', 'ReportObject.ExecuteIfComplete', 3);
                HandleRequestPart2(this.Request);
                break;
            case 2:
                Log('??', 'ReportObject.ExecuteIfComplete', 3);
                break;
        }
    }
}
function AddCore(sequence, location,CoreStructure)
{
	var coreStructString = '';
	for(var ii = 0; ii < CoreStructure.length; ++ii)
	{
		coreStructString += CoreStructure[ii].type;
	}
	sequence = sequence.substr(0,location)+coreStructString+sequence.substr(location+1);
}

//Request
// {
//	prefs
//	{
//		tempEnv,
//		naEnv,
//		mgEnv,
//		oligoEnv,
//		cutsites,
//		promoter	
//	}
//  CutsiteTypeCandidateContainer : array
//    {
//        element : array (CutsiteType with Cutsites)
//        {
//            Type : string
//            element : object (Cutsite with candidates)
//            {
//                Candidates: array (Candidates),
//                ID : string
//           }
//        }
//    }
//	
//  e.g. : 
//  <CutsiteTypeCandidateContainer>
//        <element:cutsitetype>
//            <type>GUC</type>
//            <element:cutsite>
//                <ID>
//                    GUC0
//                </ID>
//                <Candidates>
//                </Candidates>
//            </element:cutsite>
//            <element>
//                <ID>
//                    GUC1
//                </ID>
//                <Candidates>
//                </Candidates>
//            </element>
//            <element:cutsite>
//                <ID>
//                    GUC2
//               </ID>
//                <Candidates>
//                </Candidates>
//            </element>
//        </element>
//        <element:cutsitetype>
//            <type>GUA</type>
//            <element:cutsite>
//                <ID>
//                    GUA0
//                </ID>
//                <Candidates>
//                </Candidates>
//            </element>
//            <element:cutsite>
//                <ID>
//                    GUA1
//                </ID>
//                <Candidates>
//                </Candidates>
//            </element>
//            <element:cutsite>
//                <ID>
//                    GUA2
//                </ID>
//                <Candidates>
//                </Candidates>
//            </element>
//        </element>
//  </CutsiteTypeCandidateContainer>
//




function HandleRequestPart1(request)
{
    //Make directory for request
    var fs = require('fs');
    fs.mkdirSync(request.ID)
    
	var possibleCutsitesTypes = request.prefs.cutsites;
    
    var CutsiteTypeCandidateContainer = new Array();
	//For each cutsite
	for(var ii = 0 ; ii < possibleCutsitesTypes.length ; ++ii)
	{
        var cutSites = new Array();
        cutSites.Type = possibleCutsitesTypes[ii];

		//Generate ii cutsites and jj candidates         
		var rawCandidatesPerCutsite = CandidateGenerationModule.GenerateCandidates 
			(
				request.sequence,
				possibleCutsitesTypes[ii], 
				{
					'left_arm_min' : request.prefs.left_arm_min ,
					'right_arm_min' : request.prefs.right_arm_min,
					'left_arm_max' : request.prefs.left_arm_max,
					'right_arm_max' : request.prefs.right_arm_max,
					'promoter' : request.prefs.promoter
				}
			);
		for(var jj = 0; jj < rawCandidatesPerCutsite.length; ++jj)
        //For each cutsite
        {
            
        	var candidates = new Array();
            var cutsiteCandidates = rawCandidatesPerCutsite [jj];
            for(var kk = 0; kk < cutsiteCandidates.length; ++kk)
            {
                var rawCandidate = cutsiteCandidates[kk];
                var seqWithCore = AddCore(rawCandidate.seq, rawCandidate.cut , Model.DomainObjects.CATALITIC_CORES[request.coreTypeId]);
                var newCandidate  = 
                new Candidate( 
                    rawCandidate.seq , 
                    rawCandidate.cut, 
                    /*Generate candidate ID id*/ kk.toString(), 
                    request.coreTypeId, 
                    request.ID ,
                    /*Create cutsite ID*/possibleCutsitesTypes[ii] + jj.toString(),
                    rawCandidate.targetLocation 
                    );
                candidates.push(newCandidate);
            }
            
            cutSites.push
            (
                {
                    'Candidates' : candidates,
                    'ID' : possibleCutsitesTypes[ii] + jj.toString()
                }
            );

            FoldCandidates 
            ( 
                { 
                    'ID' : possibleCutsitesTypes[ii] + jj.toString(), 
                    'requestID':request.ID
                }, 
                candidates, 
                new ReportObject(request)  
             ) ; 
        }
        CutsiteTypeCandidateContainer.push(cutSites);
	}
	request.CutsiteTypeCandidateContainer = CutsiteTypeCandidateContainer;
	
}


function _handleRequestPart2(request, reportObject) 
{
    var cutsiteTypes = request.prefs.cutsites;
    for(var ii = 0; ii < cutsiteTypes.length;++ii)
    {
        var structures = ParseUtilities.ParseSFoldResults(request.ID,cutsiteTypes[ii]);
    }
}

function HandleRequestPart2(request)
{
    Log("Entered part 2 for " + request.ID, "HandleRequestPart2", 3);
    var reportObject = new ReportObject(request);
    _handleRequestPart2(request, reportObject); //Simulate execute async
}



exports.HandleRequestPart1 = HandleRequestPart1;
exports.HandleRequestPart2 = HandleRequestPart2;