
String.prototype.replaceAll = function(find,replace)
{
	return this.replace(new RegExp(find, 'g'), replace);
}

function Complement( oligo , isRna )
{
	if(isRna == undefined)
		isRna = true;
	var res = new Array();
	for(var ii = 0; ii < oligo.length; ++ii)
	{
		var c = oligo[ii];
		switch(c)
		{
			case 'G':
				res.push('C');
				break;
			case 'C':
				res.push('G');
				break;
			case 'A':
				if(isRna)
					res.push('U');
				else
					res.push('T');
				break;
			case 'U':
			case 'T':
				res.push('A');
					break;
			default:
				res.push(c);
		}
	}
	return res.join('');
}

function Reverse( oligo )
{
	return oligo.split("").reverse().join("");
}

function ReverseComplement(oligo)
{
	return Complement(Reverse(oligo));
}

function SequenceLength (oligo)
{
	var res = 0;
	for(var ii = 0; ii < oligo.length; ++ii)
	{
		var c = oligo[ii];
		switch(c)
		{
			case 'G':
				res +=1;
				break;
			case 'C':
				res +=1;
				break;
			case 'A':
				res +=1;
				break;
			case 'U':
			case 'T':
				res +=1;
				break;

		}
	}
	return res;
}

function RnaToDna(seq)
{
	return seq.replaceAll('U','T');
}
function DnaToRna(seq)
{
	return seq.replaceAll('T','U');
}
exports.SequenceLength = SequenceLength;
exports.ReverseComplement = ReverseComplement;
exports.Reverse = Reverse;
exports.Complement =  Complement;
exports.DnaToRna = DnaToRna;
exports.RnaToDna =  RnaToDna;