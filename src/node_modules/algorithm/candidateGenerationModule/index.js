

function FindCutsites( seq ,  CutSiteType )
{
	var loc = new Array();
	res = -1;
	do
	{
		res = seq.indexOf(CutSiteType, res + 1);
		if(res !== -1)
			loc.push(res);
	}
	while (res !== -1);
	return loc;
}

function CreateCandidates (seq, cutSites, options)
{
	var Candidates = new Array();
	//Per cutsite
	//Load params
	var lamin = options.left_arm_min;
	var ramin = options.right_arm_min;
	var lamax = options.left_arm_max;
	var ramax = options.right_arm_max;
	
	for(var ii = 0 ; ii < cutSites.length;++ii)
	{
		var firstCutsiteCands = new Array();
		for(var jj = lamin; jj < lamax; ++jj)
		{
			var start = cutSites[ii] - jj;
			if(start < 0)
				continue;
			for(var kk = ramin; kk < ramax; ++kk)
			{
				var end = cutSites[ii]+3+kk;
				var length = end - start;
				if(end >= seq.length)
					continue;
				firstCutsiteCands.push({"seq" : seq.substr(start,length), "cut":(jj+2)});
				
			}
		}
		Candidates.push(firstCutsiteCands);
	}

	return Candidates;
}


function GenerateCandidates( sequence, cutSiteType, options )
{
	var csites = FindCutsites (sequence, cutSiteType);
	var candidates = CreateCandidates(sequence, csites, options);
	return candidates;
}


exports.GenerateCandidates = GenerateCandidates;